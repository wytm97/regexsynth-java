buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
    }
}

plugins {
    id 'java-library'
    id 'io.codearte.nexus-staging' version '0.11.0'
}

apply plugin: 'com.bmuschko.nexus'
apply plugin: 'jacoco'

// Metadata Definition and Upload
group = 'dev.yasint'
archivesBaseName = "regexsynth"
version = '1.0.4'

// RegexSynth supports Java 8
sourceCompatibility = 1.8

repositories {
    // for https: maven { url "https://repo1.maven.org/maven2" }
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    compile group: 'com.google.re2j', name: 're2j', version: '1.3'
}

modifyPom {
    project {
        name 'RegexSynth'
        packaging 'jar'
        description 'RegexSynth is a minimal library that aims to construct, synthesize, and improve' +
                ' comprehension of complex regular expressions.'
        url 'https://github.com/wytm97/regexsynth-java'
        inceptionYear '2020'
        scm {
            connection 'scm:git:git://github.com/wytm97/regexsynth-java.git'
            developerConnection 'scm:git:ssh://github.com:wytm97/regexsynth-java.git'
            url 'https://github.com/wytm97/regexsynth-java/tree/master'
        }
        licenses {
            license {
                name 'MIT License'
                url 'http://www.opensource.org/licenses/mit-license.php'
            }
        }
        developers {
            developer {
                id 'wytm97'
                name 'Yasin Tharak'
                email 'wytm97@gmail.com'
            }
        }
    }
}

extraArchive {
    sources = true
    tests = true
    javadoc = true
}

nexus {
    sign = true
    repositoryUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
    snapshotRepositoryUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
}

nexusStaging {
    packageGroup = "dev.yasint.regexsynth" // optional if packageGroup == project.getGroup()
    // stagingProfileId = "yourStagingProfileId" // when not defined will be got from server using "packageGroup"
}

jacocoTestReport {
    group = "test-coverage-reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = false
        html.enabled = true
    }
    sourceDirectories = fileTree(dir: 'src/main/dev.yasint.regexsynth')
}

check.dependsOn jacocoTestReport

test {
    // Enable JUnit 5 (Gradle 4.6+).
    useJUnitPlatform()
    // Always run tests, even when nothing changed.
    dependsOn 'cleanTest'
    // Show test results.
    testLogging {
        events "passed", "skipped", "failed"
    }
}
